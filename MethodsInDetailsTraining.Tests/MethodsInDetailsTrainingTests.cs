using NUnit.Framework;

namespace MethodsInDetailsTraining.Tests
{
    [TestFixture]
    public class MethodsInDetailsTrainingTests
    {
        [TestCase(3456.45, ExpectedResult = "0100000010101011000000001110011001100110011001100110011001100110")]
        [TestCase(-14.74779484300, ExpectedResult = "1100000000101101011111101101111011110111001101011001101011011011")]
        [TestCase(-255.255, ExpectedResult = "1100000001101111111010000010100011110101110000101000111101011100")]
        [TestCase(255.255, ExpectedResult = "0100000001101111111010000010100011110101110000101000111101011100")]
        [TestCase(4294967295.0, ExpectedResult = "0100000111101111111111111111111111111111111000000000000000000000")]
        [TestCase(double.MinValue, ExpectedResult = "1111111111101111111111111111111111111111111111111111111111111111")]
        [TestCase(double.MaxValue, ExpectedResult = "0111111111101111111111111111111111111111111111111111111111111111")]
        [TestCase(double.Epsilon, ExpectedResult = "0000000000000000000000000000000000000000000000000000000000000001")]
        [TestCase(double.NaN, ExpectedResult = "1111111111111000000000000000000000000000000000000000000000000000")]
        [TestCase(double.NegativeInfinity, ExpectedResult = "1111111111110000000000000000000000000000000000000000000000000000")]
        [TestCase(double.PositiveInfinity, ExpectedResult = "0111111111110000000000000000000000000000000000000000000000000000")]
        [TestCase(-0.0, ExpectedResult = "1000000000000000000000000000000000000000000000000000000000000000")]
        [TestCase(2132493284.0, ExpectedResult = "0100000111011111110001101101000011111001000000000000000000000000")]
        [TestCase(-12342734098.22, ExpectedResult = "1100001000000110111111010111100101101000100100011100001010001111")]
        public string ToBinaryString_returns_proper_binary_string(double number)
        {
            return number.ToBinaryString();
        }
    }
}